---
import BaseLayout from "../layouts/BaseLayout.astro";
---

<BaseLayout>
    <div class="container mx-auto px-4 py-8">
        <h1 class="text-3xl font-bold mb-8">Admin Dashboard - Bildbestellungen</h1>

        <!-- Bildstatistiken Grafik -->
        <div class="bg-white rounded-lg shadow-md p-6 mb-6">
            <h2 class="text-xl font-semibold mb-4">Bildstatistiken - Bestellübersicht</h2>
            <div id="image-chart" class="mb-4">
                <div id="chart-loading" class="text-center py-8">
                    <div class="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-500 mx-auto"></div>
                    <p class="mt-2 text-sm text-gray-600">Lade Statistiken...</p>
                </div>
            </div>
        </div>

        <div class="bg-white rounded-lg shadow-md p-6 mb-6">
            <div class="flex justify-between items-center mb-4">
                <h2 class="text-xl font-semibold">Übersicht</h2>
                <button id="refresh-btn" class="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded">
                    Aktualisieren
                </button>
            </div>
            <div id="stats" class="grid grid-cols-1 md:grid-cols-3 gap-4 mb-6">
                <div class="bg-blue-100 p-4 rounded">
                    <h3 class="font-semibold text-blue-800">Gesamtbestellungen</h3>
                    <p id="total-orders" class="text-2xl font-bold text-blue-600">-</p>
                </div>
                <div class="bg-green-100 p-4 rounded">
                    <h3 class="font-semibold text-green-800">Heute</h3>
                    <p id="today-orders" class="text-2xl font-bold text-green-600">-</p>
                </div>
                <div class="bg-yellow-100 p-4 rounded">
                    <h3 class="font-semibold text-yellow-800">Letzte Aktualisierung</h3>
                    <p id="last-updated" class="text-sm text-yellow-600">-</p>
                </div>
            </div>
        </div>

        <div class="bg-white rounded-lg shadow-md p-6">
            <h2 class="text-xl font-semibold mb-4">Bestellungen</h2>
            
            <div id="error-message" class="hidden bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded mb-4">
                <p id="error-text"></p>
            </div>

            <div id="loading" class="text-center py-8">
                <div class="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-500 mx-auto"></div>
                <p class="mt-4">Lade Bestellungen...</p>
            </div>

            <div id="orders-table" class="hidden">
                <div class="overflow-x-auto">
                    <table class="min-w-full table-auto">
                        <thead>
                        <tr class="bg-gray-50">
                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                               Gewähltes Bild
                            </th>
                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                Name
                            </th>
                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                E-Mail
                            </th>
                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                Bestellnummer
                            </th>
                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                Datum
                            </th>
                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                Aktionen
                            </th>
                        </tr>
                        </thead>
                        <tbody id="orders-tbody" class="bg-white divide-y divide-gray-200">
                        </tbody>
                    </table>
                </div>
            </div>

            <div id="no-orders" class="hidden text-center py-8">
                <p class="text-gray-500">Noch keine Bestellungen vorhanden.</p>
            </div>
        </div>
    </div>

    <!-- Order Detail Modal -->
    <div id="order-modal" class="fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full hidden">
        <div class="relative top-20 mx-auto p-5 border w-11/12 md:w-3/4 lg:w-1/2 shadow-lg rounded-md bg-white">
            <div class="mt-3">
                <h3 class="text-lg leading-6 font-medium text-gray-900 mb-4">Bestelldetails</h3>
                <div id="modal-content" class="text-sm text-gray-500 max-h-96 overflow-y-auto">
                </div>
                <div class="flex justify-end mt-4">
                    <button id="close-modal" class="px-4 py-2 bg-gray-500 text-white text-base font-medium rounded-md shadow-sm hover:bg-gray-700">
                        Schließen
                    </button>
                </div>
            </div>
        </div>
    </div>
</BaseLayout>

<script>
    interface Order {
        id: string;
        orderNumber: string;
        name: string;
        email: string;
        phone: string;
        message: string;
        selectedImage: number;
        selectedImageDetails: any;
        timestamp: string;
        formattedDate: string;
        netlifyId?: string;
    }

    interface ImageStats {
        [key: string]: {
            count: number;
            title: string;
        };
    }

    let orders: Order[] = [];
    let imageStats: ImageStats = {};

    function showError(message: string) {
        const errorDiv = document.getElementById('error-message')!;
        const errorText = document.getElementById('error-text')!;
        
        errorText.textContent = message;
        errorDiv.classList.remove('hidden');
        
        setTimeout(() => {
            errorDiv.classList.add('hidden');
        }, 8000);
    }

    function createImageChart() {
        const chartContainer = document.getElementById('image-chart')!;
        document.getElementById('chart-loading')?.classList.add('hidden');

        if (Object.keys(imageStats).length === 0) {
            chartContainer.innerHTML = '<p class="text-center text-gray-500 py-8">Keine Daten für Statistiken verfügbar.</p>';
            return;
        }

        // Sortiere Bilder nach ID
        const sortedImages = Object.entries(imageStats).sort(([a], [b]) => parseInt(a) - parseInt(b));
        const maxCount = Math.max(...sortedImages.map(([, stats]) => stats.count));

        const chartHTML = `
            <div class="space-y-4">
                <div class="text-center text-sm text-gray-600 mb-4">
                    Anzahl Bestellungen pro Bild (Insgesamt: ${sortedImages.reduce((sum, [, stats]) => sum + stats.count, 0)})
                </div>
                ${sortedImages.map(([imageId, stats]) => {
                    const percentage = maxCount > 0 ? (stats.count / maxCount) * 100 : 0;
                    return `
                        <div class="flex items-center">
                            <div class="w-20 text-sm font-medium text-gray-700">${stats.title}</div>
                            <div class="flex-1 mx-4">
                                <div class="bg-gray-200 rounded-full h-6 relative">
                                    <div class="bg-blue-600 h-6 rounded-full flex items-center justify-center text-white text-sm font-medium" 
                                         style="width: ${Math.max(percentage, 10)}%">
                                        ${stats.count}
                                    </div>
                                </div>
                            </div>
                        </div>
                    `;
                }).join('')}
            </div>
        `;

        chartContainer.innerHTML = chartHTML;
    }

    async function loadOrders() {
        try {
            document.getElementById('error-message')?.classList.add('hidden');
            document.getElementById('loading')?.classList.remove('hidden');
            document.getElementById('orders-table')?.classList.add('hidden');
            document.getElementById('no-orders')?.classList.add('hidden');

            const response = await fetch('/.netlify/functions/orderFunc', {
                method: 'GET',
                headers: {
                    'Content-Type': 'application/json',
                }
            });

            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }

            const data = await response.json();

            if (data.success) {
                orders = data.orders || [];
                imageStats = data.imageStats || {};
                updateUI(data);
                createImageChart();
            } else {
                throw new Error(data.error || 'Unbekannter Fehler');
            }
        } catch (error) {
            console.error('Fehler beim Laden der Bestellungen:', error);
            showError(`Fehler beim Laden der Bestellungen: ${error.message}`);
            
            document.getElementById('loading')?.classList.add('hidden');
            document.getElementById('orders-table')?.classList.add('hidden');
            document.getElementById('no-orders')?.classList.remove('hidden');
        }
    }

    function updateUI(data: any) {
        document.getElementById('total-orders')!.textContent = (data.totalOrders || 0).toString();

        const today = new Date().toDateString();
        const todayOrders = orders.filter(order => new Date(order.timestamp).toDateString() === today);
        document.getElementById('today-orders')!.textContent = todayOrders.length.toString();

        document.getElementById('last-updated')!.textContent = new Date(data.lastUpdated || Date.now()).toLocaleString('de-DE');

        const tbody = document.getElementById('orders-tbody')!;
        tbody.innerHTML = '';

        if (orders.length === 0) {
            document.getElementById('orders-table')?.classList.add('hidden');
            document.getElementById('no-orders')?.classList.remove('hidden');
        } else {
            document.getElementById('orders-table')?.classList.remove('hidden');
            document.getElementById('no-orders')?.classList.add('hidden');

            orders.forEach(order => {
                const row = document.createElement('tr');
                row.innerHTML = `
                    <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">${order.selectedImageDetails?.title || `Bild ${order.selectedImage}`}</td>
                    <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">${order.name}</td>
                    <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">${order.email}</td>
                    <td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">${order.orderNumber}</td>
                    <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">${order.formattedDate}</td>
                    <td class="px-6 py-4 whitespace-nowrap text-sm font-medium">
                        <button class="text-blue-600 hover:text-blue-900 view-order" data-order-id="${order.id}">
                            Anzeigen
                        </button>
                    </td>
                `;
                tbody.appendChild(row);
            });

            document.querySelectorAll('.view-order').forEach(button => {
                button.addEventListener('click', (e) => {
                    const orderId = (e.target as HTMLElement).getAttribute('data-order-id');
                    showOrderDetails(orderId!);
                });
            });
        }

        document.getElementById('loading')?.classList.add('hidden');
    }

    function showOrderDetails(orderId: string) {
        const order = orders.find(o => o.id === orderId);
        if (!order) return;

        const modalContent = document.getElementById('modal-content')!;
        modalContent.innerHTML = `
            <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div>
                    <h4 class="font-semibold text-gray-900 mb-2">Bestellinformationen</h4>
                    <p><strong>Bestellnummer:</strong> ${order.orderNumber}</p>
                    <p><strong>Datum:</strong> ${order.formattedDate}</p>
                    <p><strong>Gewähltes Bild:</strong> ${order.selectedImageDetails?.title || `Bild ${order.selectedImage}`}</p>
                </div>
                <div>
                    <h4 class="font-semibold text-gray-900 mb-2">Kontaktdaten</h4>
                    <p><strong>Name:</strong> ${order.name}</p>
                    <p><strong>E-Mail:</strong> ${order.email}</p>
                    <p><strong>Telefon:</strong> ${order.phone || 'Nicht angegeben'}</p>
                </div>
            </div>
            ${order.message ? `
                <div class="mt-6">
                    <h4 class="font-semibold text-gray-900 mb-2">Nachricht</h4>
                    <p class="bg-gray-50 p-3 rounded">${order.message}</p>
                </div>
            ` : ''}
        `;

        document.getElementById('order-modal')?.classList.remove('hidden');
    }

    document.addEventListener('DOMContentLoaded', () => {
        loadOrders();

        // Event listeners
        document.getElementById('refresh-btn')?.addEventListener('click', loadOrders);

        document.getElementById('close-modal')?.addEventListener('click', () => {
            document.getElementById('order-modal')?.classList.add('hidden');
        });

        // Close modal when clicking outside
        document.getElementById('order-modal')?.addEventListener('click', (e) => {
            if (e.target === e.currentTarget) {
                document.getElementById('order-modal')?.classList.add('hidden');
            }
        });
    });
</script>